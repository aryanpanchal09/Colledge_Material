Aptitude Basic Question 

Numerical Reasoning:

Q: If a server processes 10 requests per second, how many requests can it process in an hour?
A: There are 3600 seconds in an hour. Therefore, it can process 10 * 3600 = 36,000 requests.

Q: A software project requires 8 developers to complete in 12 weeks. How many developers would be needed to finish in 6 weeks?
A: You need twice the work rate, so you'd need twice the developers: 8 * 2 = 16 developers.

Q: A program takes 5 seconds to process 1GB of data. How long will it take to process 10GB?
A: Processing time is directly proportional to data size: 5 seconds/GB * 10GB = 50 seconds.

Q: A codebase has 5000 lines of code, and 2% are comments. How many lines are comments?
A: Calculate 2% of 5000: 5000 * 0.02 = 100 lines.

Q: If a computer network has 10 nodes, how many connections are possible between them?
A: Each node can connect to 9 others. To avoid double-counting, divide by 2: 10 * 9 / 2 = 45 connections.

Logical Reasoning:

Q: What comes next in the series: 1, 1, 2, 3, 5, 8, __?
A: This is the Fibonacci sequence. Each number is the sum of the two preceding ones: 8 + 5 = 13.

Q: If all cats are mammals, and all mammals are warm-blooded, are all cats warm-blooded?
A: Yes. This follows a logical deduction: cats belong to a subset (mammals) that has the characteristic of being warm-blooded.

Q: Find the odd one out: Keyboard, Mouse, Monitor, CPU, Printer.
A: CPU. All others are peripheral devices, while the CPU is a core internal component.

Q: John is taller than Mary. Mary is taller than Peter. Who is the shortest?
A: Peter. This follows a transitive relation: If A > B and B > C, then A > C.

Q: Complete the analogy: Book is to Page as Program is to __?
A: Line (or Instruction). Both represent smaller units within a larger structure.

Verbal Reasoning:

Q: Choose the antonym of "efficient": a) effective b) incompetent c) quick d) productive
A: b) incompetent

Q: Which word is closest in meaning to "optimize": a) worsen b) improve c) complicate d) analyze
A: b) improve

Q: Identify the error: "The team are working hard to meet the deadline."
A: "Are" should be "is." The team is treated as a singular noun when referring to the collective unit.

Q: What is the meaning of "debug" in a software context?
A: To identify and remove errors or defects from a program.

Q: Explain the difference between "hardware" and "software."
A: Hardware refers to the physical components of a computer system, while software refers to the programs and instructions that control the hardware.

Basic Programming:

Q: What is the difference between a variable and a constant in programming?
A: A variable's value can change during program execution, while a constant's value remains fixed.

Q: What is a loop in programming? Provide an example.
A: A loop repeatedly executes a block of code until a specific condition is met. Example: for(int i=0; i<5; i++){ ... } (This loop runs 5 times).

Q: What is the purpose of a function in programming?
A: Functions encapsulate reusable blocks of code, improving modularity and code organization.

Q: What is the difference between an array and a linked list?
A: Arrays store elements contiguously in memory, while linked lists use pointers to connect elements, allowing for dynamic size changes.

Q: Explain the difference between "==" and "===" in JavaScript (or similar comparison operators in other languages).
A: "==" checks for value equality (with potential type coercion), while "===" checks for both value and type equality.

Algorithm Design:

Q: Describe a simple algorithm to find the largest number in an unsorted array.
A: Iterate through the array, comparing each element to a current maximum. Update the maximum if a larger element is found.

Q: What is the time complexity of searching for an element in a sorted array using binary search?
A: O(log n) - Binary search halves the search space with each comparison, leading to logarithmic time complexity.

Q: Explain the difference between a stack and a queue data structure.
A: Stacks follow Last-In-First-Out (LIFO) order, while queues follow First-In-First-Out (FIFO) order.

Q: What is recursion in programming?
A: Recursion is a technique where a function calls itself, typically with a smaller subproblem, until a base case is reached.

Q: Describe a simple sorting algorithm (e.g., bubble sort or insertion sort).
A: Bubble Sort: Repeatedly compares adjacent elements and swaps them if they're in the wrong order, "bubbling" the largest element to the end.

Software Development Concepts:

Q: What is version control and why is it important in software development?
A: Version control tracks changes to code, allowing for collaboration, history tracking, and easy reverts to previous versions.

Q: What is the Agile development methodology?
A: Agile emphasizes iterative development, collaboration, and flexibility, with a focus on delivering working software in short cycles (sprints).

Q: Explain the difference between front-end and back-end development.
A: Front-end focuses on the user interface (UI) and user experience (UX) of a website or application, while back-end deals with the server-side logic, database interactions, and other behind-the-scenes functionalities.

Q: What is an API (Application Programming Interface)?
A: An API allows different software systems to communicate and interact with each other, defining rules and specifications for data exchange.

Q: What is the purpose of testing in software development?
A: Testing ensures the quality of software by identifying defects and ensuring that the software meets requirements.

Database Management:

Q: What is a database? What is the difference between a relational database and a NoSQL database?
A: A database is an organized collection of data. Relational databases organize data into tables with relationships, while NoSQL databases offer more flexible data models like key-value stores or document databases.

Q: What is SQL (Structured Query Language)?
A: SQL is a language used to manage and query data in relational database management systems (RDBMS).

Q: What is the purpose of a primary key in a database table?
A: A primary key uniquely identifies each record in a table and ensures data integrity.

Q: Explain the concept of normalization in database design.
A: Normalization reduces data redundancy and improves data integrity by organizing data into multiple related tables.

Q: What is the difference between DELETE and TRUNCATE commands in SQL?
A: DELETE removes rows one by one, allowing for filtering with WHERE clauses. TRUNCATE removes all rows from a table at once, being faster but non-transactional.

General Tech Awareness:

Q: What is cloud computing?
A: Cloud computing involves delivering computing services (servers, storage, networking, etc.) over the internet, allowing users to access resources on demand.

Q: What is the Internet of Things (IoT)?
A: IoT refers to the network of physical devices embedded with sensors and software, enabling them to connect and exchange data over the internet.

Q: What is artificial intelligence (AI)?
A: AI involves developing computer systems capable of performing tasks that typically require human intelligence, such as learning, problem-solving, and decision-making.

Q: What is the difference between HTTP and HTTPS?
A: HTTP is a protocol for transferring data on the web. HTTPS is the secure version of HTTP, encrypting communication for security.

Q: What is cybersecurity, and why is it important?
A: Cybersecurity involves protecting computer systems and networks from unauthorized access, data breaches, and other cyber threats. It ensures data privacy and system integrity.

Problem-Solving:

Q: You are given two sorted arrays. Describe an algorithm to merge them into a single sorted array.
A: Use a two-pointer approach, comparing elements from both arrays and placing the smaller one into the merged array until one array is exhausted, then copy the remaining elements.

Q: How would you reverse a string in your preferred programming language?
A: Answers vary by language. Common approaches include iterating through the string in reverse order or using built-in string reversal functions.

Q: You are designing a simple login system. What are some important security considerations?
A: Use strong password hashing, protect against SQL injection attacks, implement appropriate input validation, and enforce account lockout policies.

Q: How would you approach debugging a program that is not working as expected?
A: Use a systematic approach: reproduce the issue, analyze error messages, use debugging tools (breakpoints, logging), and test code in isolation.

Q: You are working on a team project. How would you handle a disagreement with another team member about a technical decision?
A: Communicate clearly, listen to their perspective, try to understand the reasoning behind their view, and collaboratively explore alternative solutions.

51. Q: Describe the difference between a compiler and an interpreter.
A: A compiler translates the entire source code into machine code before execution, while an interpreter translates and executes code line by line.

52. Q: What is the purpose of a constructor in object-oriented programming?
A: A constructor is a special method used to initialize an object's state (attributes) when the object is created.

53. Q: Explain the concept of inheritance in object-oriented programming.
A: Inheritance allows a class (subclass) to inherit properties and methods from another class (superclass), promoting code reuse and hierarchical relationships.

54. Q: What is polymorphism in object-oriented programming?
A: Polymorphism allows objects of different classes to be treated as objects of a common type, enabling flexibility and dynamic binding of methods.

55. Q: What is the difference between a class and an object in object-oriented programming?
A: A class is a blueprint or template for creating objects, while an object is an instance of a class, having its own state and behavior.

56. Q: What is the purpose of a design pattern in software development?
A: Design patterns provide reusable solutions to common software design problems, improving code maintainability, readability, and scalability.

57. Q: What is the difference between a stack overflow and a heap overflow?
A: A stack overflow occurs when too much data is pushed onto the call stack, while a heap overflow happens when dynamic memory allocation on the heap exceeds available space.

58. Q: What is the purpose of a garbage collector in programming languages like Java or Python?
A: Garbage collectors automatically reclaim memory occupied by objects that are no longer referenced, preventing memory leaks.

59. Q: What is the difference between a process and a thread?
A: A process is an independent execution environment with its own memory space, while a thread is a unit of execution within a process, sharing the process's memory space.

60. Q: What is a deadlock in the context of concurrent programming?
A: A deadlock occurs when two or more threads are blocked indefinitely, each waiting for the other to release the resources it needs.

61. Q: Explain the concept of Big O notation in algorithm analysis.
A: Big O notation describes the upper bound of an algorithm's time or space complexity as the input size grows, providing a measure of efficiency.

62. Q: What is the difference between a linear search and a binary search?
A: Linear search checks elements one by one, suitable for unsorted data, while binary search repeatedly divides the search space in half, requiring sorted data.

63. Q: What is a hash table and how does it work?
A: A hash table uses a hash function to map keys to indices in an array, enabling efficient insertion, deletion, and retrieval of data.

64. Q: What is dynamic programming?
A: Dynamic programming solves complex problems by breaking them into smaller overlapping subproblems, storing and reusing solutions to avoid redundant computations.

65. Q: Explain the difference between a graph and a tree data structure.
A: Both represent connections between nodes. Graphs allow for cycles and multiple paths between nodes, while trees are hierarchical with a single path between any two nodes.

66. Q: What is the purpose of a load balancer in a distributed system?
A: Load balancers distribute incoming network traffic across multiple servers, preventing overload on a single server and improving system availability.

67. Q: What is caching and how does it improve performance?
A: Caching stores frequently accessed data in a fast access location (cache), reducing the need to retrieve data from slower storage, thus improving response times.

68. Q: What is the difference between synchronous and asynchronous communication?
A: Synchronous communication requires both parties to be active at the same time (e.g., phone call), while asynchronous communication allows messages to be sent and received at different times (e.g., email).

69. Q: Explain the concept of a RESTful API.
A: RESTful APIs use HTTP methods (GET, POST, PUT, DELETE) to interact with resources, adhering to architectural constraints for statelessness and scalability.

70. Q: What is the purpose of a message queue in distributed systems?
A: Message queues enable asynchronous communication between components, providing a buffer for messages and ensuring reliable delivery even if components are temporarily unavailable.

71. Q: Explain the difference between unit testing, integration testing, and system testing.
A: Unit testing verifies individual components in isolation, integration testing checks interactions between components, and system testing evaluates the entire system as a whole.

72. Q: What is continuous integration and continuous delivery (CI/CD)?
A: CI/CD involves automating the build, testing, and deployment processes, enabling frequent code integrations and faster software releases.

73. Q: What is the purpose of a code review in software development?
A: Code reviews involve having other developers examine code for errors, style inconsistencies, and potential improvements, enhancing code quality and knowledge sharing.

74. Q: Explain the difference between authentication and authorization.
A: Authentication verifies the identity of a user, while authorization determines what resources a user is allowed to access.

75. Q: What is cross-site scripting (XSS) and how can it be prevented?
A: XSS is a vulnerability where malicious scripts are injected into trusted websites. Prevention involves input validation, output encoding, and using appropriate security headers.

76. Q: What is SQL injection and how can it be prevented?
A: SQL injection is a vulnerability where malicious SQL code is inserted into database queries. Prevention includes using parameterized queries and escaping user input.

77. Q: What is the difference between a cookie and a session?
A: Cookies store data on the client-side (user's browser), while sessions store data on the server-side, both used to maintain user state in web applications.

78. Q: What is the purpose of a firewall in network security?
A: Firewalls control incoming and outgoing network traffic based on predefined rules, acting as a barrier between a trusted network and untrusted networks.

79. Q: What is a VPN (Virtual Private Network) and how does it work?
A: A VPN creates a secure, encrypted connection over an existing network (like the internet), providing privacy and security for remote access or public Wi-Fi usage.

80. Q: What is the difference between TCP and UDP?
A: TCP is a connection-oriented protocol, providing reliable data transmission with error checking, while UDP is connectionless, offering faster but less reliable data transfer.

81. Q: What is an IP address and how does it relate to a domain name?
A: An IP address is a numerical label assigned to devices on a network, while a domain name is a human-readable address that maps to an IP address using DNS (Domain Name System).

82. Q: What is the cloud computing service model? (IaaS, PaaS, SaaS)
A: IaaS (Infrastructure as a Service) provides basic computing resources, PaaS (Platform as a Service) offers a platform for application development, and SaaS (Software as a Service) delivers software applications over the internet.

83. Q: What is machine learning?
A: Machine learning allows systems to learn from data without being explicitly programmed, identifying patterns and making predictions based on input data.

84. Q: What is deep learning?
A: Deep learning is a subset of machine learning using artificial neural networks with multiple layers to extract hierarchical representations from data.

85. Q: What is the difference between supervised learning and unsupervised learning?
A: Supervised learning uses labeled data to train models to make predictions, while unsupervised learning finds patterns in unlabeled data.

86. Q: What is blockchain technology?
A: Blockchain is a distributed ledger that records transactions across multiple computers, ensuring transparency, security, and tamper-resistance.

87. Q: What is cryptocurrency?
A: Cryptocurrency is a digital currency that uses cryptography for security and operates independently of central banks.

88. Q: What is the Internet of Things (IoT)?
A: The IoT refers to the network of physical devices connected to the internet, collecting and exchanging data to enable smarter and more efficient processes.

89. Q: What is edge computing?
A: Edge computing processes data closer to its source (the "edge" of the network), reducing latency and improving real-time responsiveness.

90. Q: What is the difference between a qubit and a bit?
A: A bit is a binary digit (0 or 1), while a qubit is a quantum bit, which can exist in a superposition of states (both 0 and 1 simultaneously), enabling quantum computing.

91. Q: You have a function that takes an array and returns the sum of its elements. How can you optimize it for large arrays?
A: Utilize parallel processing techniques to split the array and calculate sums concurrently, then combine the results for improved performance.

92. Q: Describe a situation where you had to debug a complex software issue. What steps did you take to identify and resolve the problem?
A: Answers will be subjective but should outline a logical approach to debugging, including: reproducing the issue, analyzing logs/error messages, testing hypotheses, and iteratively narrowing down the problem's source.

93. Q: You are working on a project with tight deadlines. How do you prioritize tasks and manage your time effectively?
A: Emphasize clear communication, task decomposition, realistic time estimates, and potentially the use of project management methodologies (e.g., Agile) for efficient workflow.

94. Q: How do you stay updated with the latest technologies and trends in the rapidly evolving field of software development?
A: Highlight continuous learning through online courses, attending conferences, following industry blogs and publications, and engaging in open-source projects or online communities.

95. Q: Describe a situation where you had to work effectively as part of a team to achieve a common goal. What was your role, and how did you contribute to the team's success?
A: Answers should showcase teamwork skills like communication, collaboration, problem-solving, and a focus on shared objectives, with specific examples of contributions and positive outcomes.

96. Q: What are your salary expectations for this role?
A: Research industry benchmarks and salary ranges for similar positions in your location and experience level to provide a well-informed and reasonable expectation.

97. Q: What are your strengths and weaknesses as a software engineer?
A: Be honest and provide concrete examples. Frame weaknesses as areas for improvement and highlight steps you are taking to address them.

98. Q: Why are you interested in working for our company?
A: Research the company and its projects thoroughly. Express genuine interest in their work, company culture, or specific technologies they utilize that align with your career goals.

99. Q: Where do you see yourself in 5 years?
A: Demonstrate ambition and a desire for professional growth. Align your answer with the company's potential career paths and express your aspirations to take on new challenges and contribute meaningfully.

100. Q: Do you have any questions for us?
A: Always have a few thoughtful questions prepared about the company, the role, the team, or the company culture. This shows your engagement and interest in the opportunity.

101. Q: What is the difference between a mutex and a semaphore in concurrent programming?
A: A mutex provides exclusive access to a resource, allowing only one thread to hold it at a time. A semaphore controls access to a pool of resources, permitting multiple threads to access a limited number of resources concurrently.

102. Q: Explain the concept of memoization in dynamic programming.
A: Memoization optimizes recursive algorithms by storing the results of expensive function calls to a cache (usually a hash table) and returning the cached result when the same inputs occur again.

103. Q: What are the advantages of using a version control system like Git?
A: Git enables collaboration, tracks code changes, allows for branching and merging, provides a history of revisions, and facilitates easy rollbacks to previous versions.

104. Q: What is the purpose of a foreign key in a relational database?
A: A foreign key establishes a link between two tables by referencing the primary key of another table, enforcing referential integrity and ensuring data consistency.

105. Q: Explain the difference between a GET and a POST request in HTTP.
A: GET requests retrieve data from a server, typically used for fetching information. POST requests submit data to be processed to a server, often used for creating or updating resources.

106. Q: What is the purpose of a DNS (Domain Name System)?
A: DNS translates human-readable domain names (e.g., google.com) into numerical IP addresses that computers use to communicate, acting like a phonebook for the internet.

107. Q: Explain the difference between virtualization and containerization.
A: Virtualization creates isolated operating system environments on a physical machine, while containerization isolates applications and their dependencies within a shared operating system kernel.

108. Q: What is a microservices architecture?
A: A microservices architecture structures an application as a collection of small, independent, and loosely coupled services, each focused on a specific business capability.

109. Q: What is the purpose of a message broker in a distributed system?
A: A message broker mediates communication between applications or services, routing messages, ensuring reliable delivery, and providing features like queuing and topic-based messaging.

110. Q: What is the difference between encryption and hashing?
A: Encryption is reversible, converting data into an unreadable format that can be decrypted back to its original form. Hashing is one-way, transforming data into a fixed-size hash value that cannot be reversed.

111. Q: What is a denial-of-service (DoS) attack?
A: A DoS attack aims to make a system or network unavailable to legitimate users by overwhelming it with traffic, preventing access to resources.

112. Q: What is a man-in-the-middle (MITM) attack?
A: In an MITM attack, an attacker secretly intercepts and relays communication between two parties,

112. Q: What is a man-in-the-middle (MITM) attack?
A: In an MITM attack, an attacker secretly intercepts and relays communication between two parties, potentially eavesdropping on or manipulating the data exchange without the parties' knowledge.

113. Q: What is a phishing attack?
A: Phishing attacks use deceptive emails or websites to trick users into revealing sensitive information, such as passwords or credit card details, by posing as trustworthy entities.

114. Q: What is a brute-force attack?
A: A brute-force attack systematically tries all possible combinations of characters to guess passwords or encryption keys, highlighting the importance of strong and unique passwords.

115. Q: What is the difference between white-box testing and black-box testing?
A: White-box testing considers the internal structure and code of the software, while black-box testing focuses on testing the functionality without knowledge of the internal implementation.

116. Q: What is regression testing, and why is it important?
A: Regression testing ensures that new code changes haven't introduced bugs into previously working functionality. It's crucial after code modifications or bug fixes.

117. Q: Explain the concept of test-driven development (TDD).
A: In TDD, tests are written before the code, guiding development and ensuring that code meets the defined requirements.

118. Q: What is the difference between a relational database management system (RDBMS) and a NoSQL database?
A: RDBMS uses structured tables with rows and columns, suitable for complex relationships. NoSQL databases offer flexible data models (key-value, document, graph), often favoring scalability and handling unstructured data.

119. Q: What is ACID in the context of database transactions?
A: ACID (Atomicity, Consistency, Isolation, Durability) refers to the properties that guarantee reliable transaction processing, ensuring data integrity.

120. Q: What is a data warehouse, and how does it differ from a transactional database?
A: A data warehouse stores large amounts of historical data from multiple sources, optimized for analytical queries, while transactional databases support daily business operations and transactions.

121. Q: What is data mining?
A: Data mining uses algorithms and techniques to discover patterns, trends, and insights from large datasets, often used for business intelligence and decision-making.

122. Q: What is Big Data?
A: Big Data refers to extremely large and complex datasets that traditional data processing methods struggle to handle, often characterized by volume, velocity, and variety.

123. Q: What is the difference between a stack and a queue?
A: A stack is a LIFO (Last-In, First-Out) data structure, like a stack of plates. A queue is a FIFO (First-In, First-Out) data structure, like a line at a store.

124. Q: What is a linked list?
A: A linked list is a data structure where elements are stored non-contiguously in memory, with each element pointing to the next one, forming a chain.

125. Q: What is the difference between a linear search and a binary search?
A: Linear search checks elements one by one, suitable for unsorted data. Binary search requires sorted data and repeatedly divides the search space in half, significantly faster for large datasets.

126. Q: Explain the difference between a class and an object in object-oriented programming.
A: A class is a blueprint or template defining the structure and behavior of objects. An object is an instance of a class, representing a specific entity with its own data.

127. Q: What is the purpose of a constructor in a class?
A: A constructor is a special method called when an object of that class is created. It initializes the object's state (attributes or member variables).

128. Q: Explain the concept of inheritance in object-oriented programming.
A: Inheritance allows a class (subclass or derived class) to inherit properties and methods from another class (superclass or base class), promoting code reuse and a hierarchical structure.

129. Q: What is polymorphism?
A: Polymorphism allows objects of different classes to be treated as objects of a common type, enabling objects to behave differently based on their class.

130. Q: What is an abstract class?
A: An abstract class cannot be instantiated directly and serves as a base class for other classes to inherit from. It may contain abstract methods, which must be implemented by the subclasses.

131. Q: Explain the concept of Agile software development.
A: Agile emphasizes iterative development, collaboration, flexibility, and customer feedback, delivering working software in short cycles (sprints) rather than following a rigid linear process.

132. Q: What is the difference between front-end development and back-end development?
A: Front-end focuses on the user interface (UI) and user experience (UX) of a website or application. Back-end deals with the server-side logic, database interactions, and functionalities that support the front-end.

133. Q: What is an API (Application Programming Interface)?
A: An API allows different software systems to communicate and interact with each other. It defines a set of rules and specifications for how software components should interact.

134. Q: What are the advantages of using a cloud computing service like AWS or Azure?
A: Cloud platforms offer scalability, flexibility, cost-efficiency, on-demand resource provisioning, and access to a wide range of services, reducing the need to manage physical infrastructure.

135. Q: What is the difference between authentication and authorization in security?
A: Authentication verifies the identity of a user or system. Authorization determines what permissions an authenticated user or system has (what they are allowed to access or do).

136. Q: What are some common security vulnerabilities that web applications should protect against?
A: Common vulnerabilities include cross-site scripting (XSS), SQL injection, cross-site request forgery (CSRF), and insecure file uploads.

137. Q: What are some ways to improve the performance of a website or web application?
A: Techniques include: optimizing images, reducing server requests, using caching, implementing a content delivery network (CDN), and minifying CSS and JavaScript files.

138. Q: What is responsive web design?
A: Responsive web design ensures that a website adapts its layout and content to display optimally on various screen sizes and devices (desktops, laptops, tablets, mobile phones).

139. Q: What is cross-browser compatibility?
A: Cross-browser compatibility ensures that a website or web application functions correctly and looks consistent across different web browsers (Chrome, Firefox, Safari, Edge) and their various versions.

140. Q: What is SEO (Search Engine Optimization), and why is it important?
A: SEO involves optimizing a website to improve its visibility and ranking in search engine results pages (SERPs). Higher rankings typically lead to more organic (non-paid) traffic.

141. Q: What are some common data structures used in computer science?
A: Common data structures include arrays, linked lists, stacks, queues, trees, graphs, hash tables, and heaps.

142. Q: What is an algorithm?
A: An algorithm is a set of well-defined instructions or a step-by-step procedure for solving a problem or performing a specific task.

143. Q: What is the time complexity of an algorithm?
A: Time complexity describes how the runtime of an algorithm increases as the input size grows. It's commonly expressed using Big O notation (e.g., O(n), O(log n), O(n^2)).

144. Q: What is the difference between a compiled language and an interpreted language?
A: Compiled languages are converted to machine code before execution (e.g., C++, Java). Interpreted languages are executed line by line by an interpreter (e.g., Python, JavaScript).

145. Q: What is a debugger, and how can it help software developers?
A: A debugger is a tool that allows developers to execute their code step-by-step, set breakpoints, inspect variables, and track the flow of execution to identify and fix errors.

146. Q: What is a version control system, and why is it essential for software development?
A: A version control system tracks changes to code over time, allowing developers to collaborate, revert to previous versions, and manage code branches. Examples include Git, SVN.

147. Q: Explain the concept of a recursive function.
A: A recursive function calls itself within its definition, typically with a smaller subproblem, until a base case is reached, preventing infinite recursion.

148. Q: What is the difference between a static variable and a global variable?
A: A static variable has scope limited to its block but retains its value between function calls. A global variable is declared outside any function and is accessible from anywhere within the program.

149. Q: What are some common sorting algorithms?
A: Bubble Sort, Insertion Sort, Selection Sort, Merge Sort, Quick Sort, Heap Sort, and Radix Sort are common sorting algorithms with varying efficiencies and complexities.

150. Q: What is the difference between pass by value and pass by reference?
A: Pass by value creates a copy of the variable's value when passed to a function, leaving the original unchanged. Pass by reference passes the memory address of the variable, allowing the function to modify the original variable.