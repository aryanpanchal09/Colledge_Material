DSA Basics

1. What is the time complexity of accessing an element in an array?  
   The time complexity for accessing an element in an array is $$O(1)$$ because it can be directly accessed using its index.

2. What is a linked list?  
   A linked list is a linear data structure where elements, called nodes, are connected using pointers, allowing for efficient insertion and deletion.

3. Explain the difference between stack and queue.  
   A stack follows Last In First Out (LIFO) order, while a queue follows First In First Out (FIFO) order for element access and removal.

4. What is recursion?  
   Recursion is a programming technique where a function calls itself directly or indirectly to solve smaller instances of the same problem.

5. Define a binary tree.  
   A binary tree is a hierarchical data structure in which each node has at most two children referred to as the left child and the right child.

6. What is a hash table?  
   A hash table is a data structure that implements an associative array, allowing for fast data retrieval using key-value pairs with average time complexity of $$O(1)$$.

7. Explain the concept of dynamic programming.  
   Dynamic programming is an optimization technique that solves complex problems by breaking them down into simpler subproblems and storing their solutions.

8. What is the purpose of a stack?  
   A stack is used to store data in a way that allows for easy access to the most recently added item, making it useful for function calls and backtracking algorithms.

9. Describe breadth-first search (BFS).  
   BFS is an algorithm for traversing or searching tree or graph data structures, exploring all neighbor nodes at the present depth before moving on to nodes at the next depth level.

10. What is a queue used for?  
    A queue is used to store elements in a sequential manner, allowing operations such as enqueue (adding) and dequeue (removing) to occur efficiently.

11. Define time complexity.  
    Time complexity measures the amount of computational time that an algorithm takes to complete as a function of the length of the input.

12. What are trees in data structures?  
    Trees are hierarchical structures consisting of nodes connected by edges, with one node designated as the root from which all other nodes descend.

13. Explain quicksort algorithm.  
    Quicksort is a divide-and-conquer algorithm that sorts elements by partitioning them into smaller sub-arrays based on pivot selection, recursively sorting those sub-arrays.

14. What is a graph?  
    A graph is a collection of nodes (vertices) connected by edges, used to represent pairwise relationships between objects.

15. Describe depth-first search (DFS).  
    DFS is an algorithm for traversing or searching tree or graph structures that explores as far down one branch as possible before backtracking.

16. What is a priority queue?  
    A priority queue is an abstract data type similar to a regular queue but where each element has a priority assigned, allowing for elements with higher priority to be dequeued before others.

17. Define merge sort algorithm.  
    Merge sort is a sorting algorithm that divides an array into halves, sorts each half recursively, and then merges them back together in sorted order.

18. What are adjacency lists?  
    Adjacency lists are a way of representing graphs where each vertex has a list of all adjacent vertices, allowing efficient storage and traversal.

19. Explain what a binary search tree (BST) is.  
    A BST is a type of binary tree where each node has at most two children, with the left child containing values less than the parent node and the right child containing values greater.

20. What does amortized analysis mean?  
    Amortized analysis evaluates the average time per operation over a sequence of operations, providing insights into performance across multiple operations rather than individual ones.

21. What is backtracking in algorithms?  
    Backtracking is an algorithmic technique for solving problems incrementally by trying partial solutions and abandoning them if they fail to satisfy the problem's constraints.

22. Define Dijkstra's algorithm.  
    Dijkstra's algorithm finds the shortest path from a starting vertex to all other vertices in a weighted graph with non-negative weights using greedy methods.

23. What are heaps in data structures?  
    Heaps are specialized tree-based structures that satisfy the heap property; either every parent node has a value less than or equal to its children (min-heap) or greater than or equal (max-heap).

24. Explain what bubble sort does.  
    Bubble sort repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order until no swaps are needed.

25. What is selection sort?  
    Selection sort divides the input list into two parts: sorted and unsorted; it repeatedly selects the smallest element from the unsorted part and moves it to the end of the sorted part.

26. Describe what an AVL tree is.  
    An AVL tree is a self-balancing binary search tree where the difference between heights of left and right subtrees cannot be more than one for all nodes.

27. What does big O notation represent?  
    Big O notation describes an upper bound on the time complexity of an algorithm, providing insights into its worst-case scenario performance as input size grows.

28. Define insertion sort algorithm.  
    Insertion sort builds a sorted array one element at a time by repeatedly taking one element from the unsorted portion and inserting it into its correct position in the sorted portion.

29. What are linked lists used for?  
    Linked lists are used for dynamic memory allocation where elements can be easily inserted or removed without reallocating or reorganizing other elements in memory.

30. Explain what topological sorting means in graphs.  
    Topological sorting orders vertices in a directed acyclic graph such that for every directed edge $$uv$$, vertex $$u$$ comes before vertex $$v$$.

31. What does breadth-first traversal do?  
    Breadth-first traversal visits all vertices at the present depth level before moving on to vertices at the next depth level, often implemented using queues.

32. Define what dynamic arrays are.  
    Dynamic arrays are resizable arrays that can grow or shrink in size during runtime; they manage memory allocation automatically as needed by reallocating space when full.

33. What is Floyd-Warshall algorithm used for?  
    The Floyd-Warshall algorithm finds shortest paths between all pairs of vertices in weighted graphs with positive or negative edge weights but no negative cycles.

34. Describe what hashing does in data structures.  
    Hashing transforms input data into fixed-size values (hash codes) which can be used efficiently for indexing and retrieving data from hash tables.

35. What does merge operation do in merge sort?  
    The merge operation combines two sorted arrays into one sorted array by comparing elements from both arrays sequentially and placing them in order into a new array.

36. Explain what tries are used for in computer science.  
    Tries are tree-like data structures used primarily for storing associative arrays where keys are usually strings; they enable fast retrieval operations based on prefixes.

37. How do you implement breadth-first search using queues?  
    BFS can be implemented using queues by enqueuing starting node, marking it visited, then iteratively dequeuing nodes while enqueuing their unvisited neighbors until all reachable nodes are processed.

38. Define what LRU cache means in computing terms.  
    An LRU (Least Recently Used) cache evicts items based on their usage history; it removes items that have not been accessed recently when space runs low to make room for new items.

39. What role do pointers play in linked lists?  
    Pointers link nodes together in linked lists; each node contains data and points to the next node, allowing traversal through the list without contiguous memory allocation like arrays require.

40. Explain how binary search works on sorted arrays.  
    Binary search divides the search interval in half repeatedly; if the target value equals the middle element, it returns its index; otherwise, it continues searching either left or right based on comparison results until found or interval empty.

41. What does 'in-place' mean regarding algorithms?  
    An 'in-place' algorithm uses only constant extra space beyond input size; it modifies input directly without needing additional storage proportional to input size during execution.

42. Define what circular linked lists are used for?  
    Circular linked lists connect last node back to first node; they facilitate continuous traversal through elements without needing to reset pointers after reaching end, useful in applications like round-robin scheduling.

43. How does selection sort operate stepwise?   
    Selection sort iterates through unsorted list to find minimum value, swaps it with first unsorted element; repeats this process until entire list becomes sorted through successive selections of minimums.

44. What do you understand by 'divide and conquer' strategy?
    Divide and conquer solves problems by breaking them down into smaller subproblems recursively until solvable; solutions to subproblems combine to form solution for original problem efficiently.
    
45. Explain what adjacency matrix represents in graphs?
    An adjacency matrix represents graph connections using 2D array where rows/columns correspond to vertices; matrix cell indicates presence/absence of edges between vertex pairs facilitating quick edge lookups.
    
46. How do you implement depth-first search recursively?
    DFS can be implemented recursively by visiting current node marking it visited then recursively calling DFS on all its unvisited adjacent nodes until all reachable nodes processed.
    
47. Define what bubble sort's worst-case scenario looks like?
    Bubble sort's worst-case occurs when input array sorted in reverse order requiring maximum comparisons/swaps leading to $$O(n^2)$$ time complexity due to repeated passes through entire array.
    
48. What role does recursion play in solving problems like factorial calculation?
     Recursion simplifies complex problems like factorial calculation by expressing solution as function calling itself with reduced parameters until reaching base case providing elegant solution formulation.
     
49.  Explain what breadth-first traversal's space complexity looks like?
     BFS's space complexity can reach up to $$O(b^d)$$ where $$b$$ represents branching factor (number of child nodes per parent), while $$d$$ denotes depth of shallowest solution affecting memory usage during traversal.
     
50.  How does insertion sort perform best with partially sorted arrays?
     Insertion sort excels with partially sorted arrays due to fewer comparisons/moves needed since elements already near their correct positions minimizing overall time complexity compared to fully unsorted scenarios.

ADVANCED 
----------------

1. What is a set in data structures?  
   A set is an abstract data type that stores unique elements without any particular order, allowing for efficient membership testing and operations like union and intersection.

2. Define a doubly linked list.  
   A doubly linked list is a type of linked list where each node contains pointers to both the next and previous nodes, allowing traversal in both directions.

3. What is the purpose of a binary heap?  
   A binary heap is a complete binary tree used to implement priority queues, where the parent node's value is either greater (max-heap) or lesser (min-heap) than its children.

4. Explain the concept of a graph traversal algorithm.  
   Graph traversal algorithms systematically visit all vertices in a graph, typically using methods like depth-first search (DFS) or breadth-first search (BFS) to explore connections.

5. What is the difference between directed and undirected graphs?  
   In directed graphs, edges have a direction indicating relationships from one vertex to another, while undirected graphs have edges representing bidirectional relationships between vertices.

6. Define what a path in a graph is.  
   A path in a graph is a sequence of vertices connected by edges, where each vertex can be visited only once in simple paths, while cycles allow revisiting vertices.

7. What is the time complexity of linear search?  
   The time complexity of linear search is $$O(n)$$, as it checks each element sequentially until the target value is found or the end of the list is reached.

8. Explain what a complete binary tree is.  
   A complete binary tree is a binary tree where all levels are fully filled except possibly for the last level, which is filled from left to right.

9. What are the advantages of using hash maps?  
   Hash maps provide average-case constant time complexity $$O(1)$$ for insertions, deletions, and lookups due to their underlying hash table implementation.

10. Define what a segment tree is.  
    A segment tree is a binary tree used for storing intervals or segments; it allows querying and updating ranges efficiently in logarithmic time.

11. What does 'greedy algorithm' mean?  
    A greedy algorithm makes locally optimal choices at each step with the hope of finding a global optimum; it does not always guarantee an optimal solution for all problems.

12. Explain what an N-ary tree is.  
    An N-ary tree is a tree data structure where each node can have at most N children, allowing for more flexible branching compared to binary trees.

13. What does 'heapify' mean in heaps?  
    Heapify is the process of rearranging elements in a heap to maintain the heap property after insertion or deletion operations.

14. Describe what an Eulerian path is in graph theory.  
    An Eulerian path visits every edge of a graph exactly once; it exists if there are exactly zero or two vertices with odd degrees in an undirected graph.

15. What are dynamic programming tables used for?  
    Dynamic programming tables store intermediate results to avoid redundant calculations, significantly improving performance for overlapping subproblems.

16. Define what a sparse matrix is.  
    A sparse matrix contains a significant number of zero elements compared to non-zero elements; specialized storage techniques like compressed storage can optimize memory usage.

17. What does 'trie' stand for and its application?  
    Trie stands for "retrieval" and is used for efficient retrieval of strings or prefixes; it's commonly applied in autocomplete systems and spell checkers.

18. Explain what topological sorting can be used for.  
    Topological sorting can be used to schedule tasks based on dependencies; it's essential in scenarios like course prerequisite ordering or build systems.

19. What are bit manipulation techniques?  
    Bit manipulation techniques involve using bitwise operators (AND, OR, XOR) to perform operations directly on bits, often optimizing space and time complexity in algorithms.

20. Define what strongly connected components (SCC) are in graphs.  
    Strongly connected components are maximal subgraphs where every vertex can reach every other vertex within that subgraph in directed graphs.

21. What does 'bipartite graph' mean?  
    A bipartite graph consists of two disjoint sets of vertices such that no two vertices within the same set are adjacent; it's often used in matching problems.

22. Explain what Floyd’s cycle-finding algorithm does.  
    Floyd’s cycle-finding algorithm detects cycles in sequences by using two pointers moving at different speeds; it identifies whether a cycle exists efficiently.

23. What role do sentinel nodes play in linked lists?  
    Sentinel nodes act as dummy nodes at the beginning or end of linked lists, simplifying edge cases during insertion and deletion operations by avoiding null checks.

24. Describe how merge operation works in merge sort algorithmically.  
    The merge operation combines two sorted arrays into one by comparing elements from both arrays sequentially and placing them into a new array until all elements are merged.

25. What does amortized time complexity indicate?  
    Amortized time complexity provides an average time per operation over a worst-case sequence of operations, smoothing out expensive operations across many cheaper ones.

26. Define what radix sort does as an algorithm.  
    Radix sort sorts numbers digit by digit starting from the least significant digit to the most significant digit using stable counting sort as an intermediate step.

27. What is KMP algorithm used for?  
    The Knuth-Morris-Pratt (KMP) algorithm efficiently searches for occurrences of a substring within another string using precomputed partial match tables to skip unnecessary comparisons.

28. Explain what Bellman-Ford algorithm achieves in graphs.  
    The Bellman-Ford algorithm finds shortest paths from a single source vertex to all other vertices in graphs with negative edge weights but no negative cycles.

29. What does 'inorder traversal' mean for binary trees?
    Inorder traversal visits nodes in ascending order: first visits left subtree, then current node, followed by right subtree; it’s commonly used for BSTs to retrieve sorted values.

30. How does depth-first search handle cycles?
    DFS handles cycles by maintaining visited nodes; if it encounters an already visited node during traversal, it recognizes that it has entered a cycle and backtracks accordingly.

31. Define what adjacency list representation offers over adjacency matrix?
    Adjacency lists offer space efficiency for sparse graphs by only storing edges that exist rather than maintaining full matrix representation which wastes space on non-existent edges.

32. What role do merge intervals play in algorithms?
    Merging intervals consolidates overlapping intervals into non-overlapping ones; this technique optimizes storage and simplifies processing tasks like scheduling or range queries.

33. Explain how backtracking can solve Sudoku puzzles effectively?
    Backtracking solves Sudoku by trying possible numbers in empty cells recursively; if conflicts arise, it backtracks to previous cells and tries different numbers until solutions are found or deemed impossible.

34. What does 'binary search tree property' entail?
    The binary search tree property dictates that for any node, all values in its left subtree must be less than its value while all values in its right subtree must be greater ensuring ordered structure facilitating efficient searches.

35. How do you determine if two strings are anagrams?
    Two strings are anagrams if they contain the same characters with identical frequencies; this can be checked using frequency counting or sorting both strings before comparison.

36. Describe how breadth-first search can find shortest paths on unweighted graphs?
    BFS finds shortest paths on unweighted graphs by exploring all neighbors level by level ensuring that when reaching any vertex for the first time, it has found the shortest path from source vertex due to its layer-wise exploration nature.

37. What does 'path compression' do in union-find algorithms?
    Path compression optimizes union-find operations by flattening the structure of trees whenever `find` operations are executed ensuring faster future queries by directly linking nodes to their root parent during traversal through union-find structure reducing depth significantly over time.
    
38. How do you use memoization effectively with recursion?
    Memoization stores results of expensive function calls and returns cached results when the same inputs occur again during recursive calls thus optimizing performance by preventing redundant calculations especially useful in problems like Fibonacci sequence computations.
    
39. Define what 'subarray' means in array contexts?
     A subarray refers to contiguous elements within an array derived from selecting any starting index up to any ending index maintaining original order without skipping elements thus enabling various computations like sums or products over specific ranges.
    
40.  What role do stacks play in expression evaluation?
     Stacks facilitate expression evaluation particularly for postfix (Reverse Polish Notation) expressions enabling operators access operands efficiently through push/pop operations ensuring correct precedence handling during computation.
    
41.  Explain how selection sort operates stepwise on arrays?
     Selection sort iteratively selects minimum element from unsorted portion then swaps it with first unsorted element progressing until entire array becomes sorted through successive selections minimizing overall comparisons.
    
42.  How do you implement depth-first search iteratively using stacks?
     DFS can be implemented iteratively using stacks by pushing starting node onto stack marking as visited then repeatedly popping nodes from stack while pushing unvisited adjacent nodes until stack becomes empty ensuring complete traversal.
    
43.  What does 'strongly connected components' signify within directed graphs?
     Strongly connected components represent maximal subsets within directed graphs where every vertex within those subsets can reach every other vertex ensuring robust connectivity characteristics crucial for various applications including network analysis.
    
44.  How do you detect cycles within directed graphs efficiently?
     Cycle detection within directed graphs can be achieved using DFS while tracking visited nodes alongside recursion stack ensuring that if we revisit any node already present within current recursion stack indicates presence of cycle.
    
45.  Define what 'Kruskal's algorithm' accomplishes concerning minimum spanning trees (MST).
     Kruskal's algorithm constructs minimum spanning trees by sorting edges based on weight then adding edges one-by-one ensuring no cycles form until all vertices are connected achieving optimal connectivity at minimal cost.
    
46.  How do you implement breadth-first search using queues effectively?
     BFS implemented using queues involves enqueuing starting node marking as visited then iteratively dequeuing nodes while enqueuing unvisited adjacent nodes ensuring layer-wise exploration across entire graph structure.
    
47.  Explain how radix sort operates on strings character-wise efficiently:
     Radix sort processes strings character-wise leveraging stable sorting techniques such as counting sort iteratively starting from least significant character progressing towards most significant thereby achieving efficient lexicographical ordering without direct comparisons.
    
48.  Describe how merge sort achieves stability during sorting process:
     Merge sort maintains stability through careful merging process whereby equal elements retain their relative order from original array preserving original input sequence integrity throughout sorting operations.
    
49.  What role do tries serve beyond basic string storage functionalities:
     Tries serve advanced functionalities such as prefix searching autocomplete systems enabling efficient retrieval based upon common prefixes allowing rapid suggestions enhancing user experience across various applications including search engines.
    
50.  How do you apply dynamic programming principles across Fibonacci sequence calculations:
     Dynamic programming principles applied across Fibonacci sequence involve storing previously computed values thereby avoiding redundant calculations leading towards optimal time complexity improvements transforming exponential naive approaches into linear solutions through effective memoization strategies enhancing computational efficiency overall.
